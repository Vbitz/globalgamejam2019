{"version":3,"sources":["app.ts"],"names":[],"mappings":"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","file":"app.d6f83109.map","sourceRoot":"../game2/src","sourcesContent":["function expect(): never {\n  throw new Error('Expect failed');\n}\n\nfunction $(selector: string): HTMLElement {\n  return document.querySelector(selector) || expect();\n}\n\nfunction _<Name extends keyof HTMLElementTagNameMap>(\n    elementName: string, attributes: {[s: string]: string},\n    ...children: Array<HTMLElement|string>): HTMLElementTagNameMap[Name] {\n  const newElement = document.createElement(elementName);\n\n  for (const key of Object.keys(attributes)) {\n    newElement.setAttribute(key, attributes[key]);\n  }\n\n  for (const child of children) {\n    if (child instanceof HTMLElement) {\n      newElement.appendChild(child);\n    } else {\n      newElement.appendChild(document.createTextNode(child));\n    }\n  }\n\n  return newElement;\n}\n\ninterface Upgrade {\n  name: string;\n\n  purchased: boolean;\n\n  price: number;\n\n  onPurchase(): void;\n}\n\ninterface Item {\n  name: string;\n\n  currentLevel: number;\n\n  getPrice(currentLevel: number): number;\n\n  onPurchase(currentLevel: number): void;\n}\n\ninterface Milestone {\n  amount: number;\n\n  unlocked: boolean;\n\n  callback(): void;\n}\n\nexport class Game {\n  private totalSleep = 0;\n  private sleepButtonAmount = 1;\n  private sleepPerSecond = 0;\n\n  private availableUpgrades: Upgrade[] = [];\n  private availableItems: Item[] = [];\n  private milestones: Milestone[] = [];\n\n  addUpgrade(name: string, price: number, onPurchase: () => void) {\n    this.availableUpgrades.push({name, purchased: false, price, onPurchase});\n  }\n\n  addItem(\n      name: string, getPrice: Item['getPrice'],\n      onPurchase: Item['onPurchase']) {\n    this.availableItems.push({name, currentLevel: 0, getPrice, onPurchase});\n  }\n\n  addMilestone(amount: number, callback: Milestone['callback']) {\n    this.milestones.push({amount, callback, unlocked: false});\n  }\n\n  start() {\n    $('#sleepButton').addEventListener('click', () => {\n      this.addSleep(this.sleepButtonAmount);\n      this.updateInterface();\n    });\n\n    this.addUpgrade('Better Sleep', this.timeToNumber(0, 0, 0, 0, 2, 0), () => {\n      this.sleepButtonAmount = this.sleepButtonAmount * 10;\n    });\n\n    this.addMilestone(this.timeToNumber(0, 0, 0, 0, 15, 0), () => {\n      this.addUpgrade(\n          'Even Better Sleep', this.timeToNumber(0, 0, 0, 0, 30, 0), () => {\n            this.sleepButtonAmount = this.sleepButtonAmount * 10;\n          });\n    });\n\n    this.addMilestone(this.timeToNumber(0, 0, 0, 0, 30, 0), () => {\n      this.addUpgrade(\n          'Super Better Sleep', this.timeToNumber(0, 0, 0, 2, 0, 0), () => {\n            this.sleepButtonAmount = this.sleepButtonAmount * 10;\n          });\n    });\n\n    this.addMilestone(this.timeToNumber(0, 0, 1, 0, 0, 0), () => {\n      this.addUpgrade(\n          'Ultra Better Sleep', this.timeToNumber(0, 0, 2, 0, 0, 0), () => {\n            this.sleepButtonAmount = this.sleepButtonAmount * 10;\n          });\n    });\n\n    this.addMilestone(this.timeToNumber(0, 0, 4, 0, 0, 0), () => {\n      this.addUpgrade(\n          'Blood Sleep', this.timeToNumber(0, 1, 0, 0, 0, 0), () => {\n            this.sleepButtonAmount = this.sleepButtonAmount * 20;\n          });\n    });\n\n    this.addMilestone(this.timeToNumber(0, 10, 0, 0, 0, 0), () => {\n      this.addUpgrade(\n          'Never-Ending Sleep', this.timeToNumber(2, 0, 0, 0, 0, 0), () => {\n            this.sleepButtonAmount = this.sleepButtonAmount * 5000;\n          });\n    });\n\n    this.addItem(\n        'Single Bed',\n        (level) => {\n          return Math.pow(2, level + 2);\n        },\n        (level) => {\n          this.sleepPerSecond += 5;\n        });\n\n    this.addMilestone(this.timeToNumber(0, 0, 0, 0, 45, 0), () => {\n      this.addItem(\n          'Double Bed',\n          (level) => {\n            return Math.pow(5, level + 2);\n          },\n          (level) => {\n            this.sleepPerSecond += 20;\n          });\n    });\n\n    this.addMilestone(this.timeToNumber(0, 0, 0, 4, 0, 0), () => {\n      this.addItem(\n          'Queen Bed',\n          (level) => {\n            return Math.pow(10, level + 2);\n          },\n          (level) => {\n            this.sleepPerSecond += 100;\n          });\n    });\n\n    this.addMilestone(this.timeToNumber(0, 0, 1, 0, 0, 0), () => {\n      this.addItem(\n          'King Bed',\n          (level) => {\n            return Math.pow(20, level + 2);\n          },\n          (level) => {\n            this.sleepPerSecond += 1000;\n          });\n    });\n\n    this.addMilestone(this.timeToNumber(0, 1, 0, 0, 0, 0), () => {\n      this.addItem(\n          'Super King Bed',\n          (level) => {\n            return Math.pow(30, level + 2);\n          },\n          (level) => {\n            this.sleepPerSecond += 5000;\n          });\n    });\n\n    this.addMilestone(this.timeToNumber(100, 0, 0, 0, 0, 0), () => {\n      this.addItem(\n          'Sleep Castle',\n          (level) => {\n            return Math.pow(50, level + 5);\n          },\n          (level) => {\n            this.sleepPerSecond += this.timeToNumber(2, 0, 0, 0, 0, 0);\n          });\n    });\n\n    this.addMilestone(this.timeToNumber(1000, 0, 0, 0, 0, 0), () => {\n      this.addItem(\n          'Coffin',\n          (level) => {\n            return Math.pow(100, level + 5);\n          },\n          (level) => {\n            $('#coffin').style.display = 'block';\n            this.sleepPerSecond += this.timeToNumber(100, 0, 0, 0, 0, 0);\n          });\n    });\n\n    setInterval(() => {\n      this.addSleep(this.sleepPerSecond);\n\n      this.updateInterface();\n    }, 1000);\n\n    this.updateInterface();\n  }\n\n  private tryUnlock() {\n    for (const milestone of this.milestones) {\n      if (milestone.unlocked) {\n        continue;\n      }\n\n      if (milestone.amount > this.getMoney()) {\n        continue;\n      }\n\n      milestone.callback();\n\n      milestone.unlocked = true;\n    }\n  }\n\n  private updateInterface() {\n    $('#totalSleep').innerText = this.timeToString(this.totalSleep);\n    $('#sleepPerSecond').innerText = this.timeToString(this.sleepPerSecond);\n    $('#sleepButtonAmount').innerText =\n        this.timeToString(this.sleepButtonAmount);\n\n    this.tryUnlock();\n\n    $('#itemContainer').innerHTML = '';\n\n    for (const item of this.availableItems) {\n      const currentPrice = item.getPrice(item.currentLevel);\n\n      const upgradeButton =\n          _('a', {\n            'href': '#',\n            'class': 'item-upgrade-button ' +\n                (this.getMoney() > currentPrice ? 'button-enabled' :\n                                                  'button-disabled')\n          },\n            'Upgrade Now');\n\n      upgradeButton.addEventListener('click', () => {\n        this.onUpgradeItem(item);\n      });\n\n      $('#itemContainer')\n          .appendChild(\n              _('div', {'class': 'item'},\n                _('div', {'class': 'item-name'}, item.name),\n                _('div', {'class': 'item-level'},\n                  'Level: ', _('span', {}, item.currentLevel.toString(10))),\n                _('div', {'class': 'item-price'}, 'Upgrade Price: ',\n                  _('span', {}, this.priceToString(currentPrice))),\n                _('div', {}, upgradeButton)));\n    }\n\n    $('#upgradeContainer').innerHTML = '';\n\n    for (const upgrade of this.availableUpgrades) {\n      if (upgrade.purchased) {\n        $('#upgradeContainer')\n            .appendChild(\n                _('div', {'class': 'upgrade upgrade-purchased'},\n                  _('div', {'class': 'upgrade-name'}, upgrade.name)));\n      } else {\n        const buyButton =\n            _('a', {\n              'href': '#',\n              'class': 'upgrade-buy-button ' +\n                  (this.getMoney() > upgrade.price ? 'button-enabled' :\n                                                     'button-disabled')\n            },\n              'Buy Now');\n\n        buyButton.addEventListener('click', () => {\n          this.onBuyUpgrade(upgrade);\n        });\n\n        $('#upgradeContainer')\n            .appendChild(_(\n                'div', {'class': 'upgrade'},\n                _('div', {'class': 'upgrade-name'}, upgrade.name),\n                _('div', {'class': 'upgrade-price'},\n                  'Price: ', _('span', {}, this.priceToString(upgrade.price))),\n                _('div', {}, buyButton)));\n      }\n    }\n  }\n\n  private onBuyUpgrade(upgrade: Upgrade): boolean {\n    if (this.getMoney() < upgrade.price) {\n      return false;\n    }\n\n    upgrade.onPurchase();\n\n    upgrade.purchased = true;\n\n    this.updateInterface();\n\n    return true;\n  }\n\n  private onUpgradeItem(item: Item): boolean {\n    if (this.getMoney() < item.getPrice(item.currentLevel)) {\n      return false;\n    }\n\n    item.currentLevel += 1;\n\n    item.onPurchase(item.currentLevel);\n\n    this.updateInterface();\n\n    return true;\n  }\n\n  private getMoney() {\n    return this.totalSleep;\n  }\n\n  private timeToNumber(\n      years: number, weeks: number, days: number, hours: number,\n      minutes: number, seconds: number) {\n    return (52 * 7 * 24 * 60 * 60) * years + (7 * 24 * 60 * 60) * weeks +\n        (24 * 60 * 60) * days + (60 * 60) * hours + (60) * minutes + seconds;\n  }\n\n  private timeToString(num: number) {\n    let ret = '';\n\n    const tiers: Array<[number, string]> = [\n      [1000 * 1000 * 52 * 7 * 24 * 60 * 60, 'era'],\n      [1000 * 52 * 7 * 24 * 60 * 60, 'eon'], [52 * 7 * 24 * 60 * 60, 'years'],\n      [7 * 24 * 60 * 60, 'weeks'], [24 * 60 * 60, 'days'], [60 * 60, 'hours'],\n      [60, 'minutes']\n    ];\n\n    for (const [tier, name] of tiers) {\n      if (num > tier) {\n        ret += `${(num / tier) | 0} ${name} `;\n        num = num % tier;\n      }\n    }\n\n    ret += `${num} seconds`;\n\n    return ret;\n  }\n\n  private priceToString(num: number) {\n    return this.timeToString(num);\n  }\n\n  private addSleep(num: number) {\n    this.totalSleep += num;\n  }\n}\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const game = new Game();\n\n  game.start();\n});"]}